
LCD_8_Bits.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000afe  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000715  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  0000149f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001824  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dd  00000000  00000000  00001878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002aa  00000000  00000000  00001c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001eff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  78:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <lcdWriteRegister>:
#define E					PORTC2
#define ALL_BITS_OUT		0xFF

void lcdWriteRegister(uint8_t data)
{
	LCD_CTRL_PORT |= 1<<E;
  80:	42 9a       	sbi	0x08, 2	; 8
	LCD_DATA_PORT = data;
  82:	85 b9       	out	0x05, r24	; 5
	LCD_CTRL_PORT &= ~(1<<E);
  84:	42 98       	cbi	0x08, 2	; 8
  86:	08 95       	ret

00000088 <lcd_init>:
}

void lcd_init()
{
	lcdWriteRegister(0x30);
  88:	80 e3       	ldi	r24, 0x30	; 48
  8a:	0e 94 40 00 	call	0x80	; 0x80 <lcdWriteRegister>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	84 e6       	ldi	r24, 0x64	; 100
  90:	94 e0       	ldi	r25, 0x04	; 4
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <lcd_init+0xa>
  96:	00 c0       	rjmp	.+0      	; 0x98 <lcd_init+0x10>
  98:	00 00       	nop
	_delay_us(4500);
	lcdWriteRegister(0x30);
  9a:	80 e3       	ldi	r24, 0x30	; 48
  9c:	0e 94 40 00 	call	0x80	; 0x80 <lcdWriteRegister>
  a0:	91 e2       	ldi	r25, 0x21	; 33
  a2:	9a 95       	dec	r25
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_init+0x1a>
  a6:	00 00       	nop
	_delay_us(100);
	lcdWriteRegister(0x30);
  a8:	80 e3       	ldi	r24, 0x30	; 48
  aa:	0e 94 40 00 	call	0x80	; 0x80 <lcdWriteRegister>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	89 ef       	ldi	r24, 0xF9	; 249
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_init+0x2a>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lcd_init+0x30>
  b8:	00 00       	nop
	_delay_ms(1);
	lcdWriteRegister(0x38);
  ba:	88 e3       	ldi	r24, 0x38	; 56
  bc:	0e 94 40 00 	call	0x80	; 0x80 <lcdWriteRegister>
  c0:	89 ef       	ldi	r24, 0xF9	; 249
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_init+0x3c>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_init+0x42>
  ca:	00 00       	nop
	_delay_ms(1);
	lcdWriteRegister(0x8);
  cc:	88 e0       	ldi	r24, 0x08	; 8
  ce:	0e 94 40 00 	call	0x80	; 0x80 <lcdWriteRegister>
  d2:	89 ef       	ldi	r24, 0xF9	; 249
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <lcd_init+0x4e>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_init+0x54>
  dc:	00 00       	nop
	_delay_ms(1);
	lcdWriteRegister(0x1);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 40 00 	call	0x80	; 0x80 <lcdWriteRegister>
  e4:	89 ef       	ldi	r24, 0xF9	; 249
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_init+0x60>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_init+0x66>
  ee:	00 00       	nop
	_delay_ms(1);
	lcdWriteRegister(0x6);
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	0e 94 40 00 	call	0x80	; 0x80 <lcdWriteRegister>
  f6:	89 ef       	ldi	r24, 0xF9	; 249
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_init+0x72>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_init+0x78>
 100:	00 00       	nop
	_delay_ms(1);
	lcdWriteRegister(0xf);
 102:	8f e0       	ldi	r24, 0x0F	; 15
 104:	0e 94 40 00 	call	0x80	; 0x80 <lcdWriteRegister>
 108:	89 ef       	ldi	r24, 0xF9	; 249
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_init+0x84>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_init+0x8a>
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <lcdWriteChar>:
	_delay_ms(1);
}

void lcdWriteChar(char c)
{
	LCD_CTRL_PORT |= 1<<RS | 1<<E;
 116:	98 b1       	in	r25, 0x08	; 8
 118:	95 60       	ori	r25, 0x05	; 5
 11a:	98 b9       	out	0x08, r25	; 8
	LCD_DATA_PORT = c;
 11c:	85 b9       	out	0x05, r24	; 5
	LCD_CTRL_PORT &= ~(1<<E);
 11e:	42 98       	cbi	0x08, 2	; 8
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcdWriteChar+0xe>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcdWriteChar+0x14>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <main>:
	_delay_ms(1);
}

int main(void)
{
    PORTB_MODE(ALL_BITS_OUT);
 12e:	84 b1       	in	r24, 0x04	; 4
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	84 b9       	out	0x04, r24	; 4
	PORTC_MODE(_BV(RS)|_BV(RW)|_BV(E));//1<<DDC0
 134:	87 b1       	in	r24, 0x07	; 7
 136:	87 60       	ori	r24, 0x07	; 7
 138:	87 b9       	out	0x07, r24	; 7
	
	lcd_init();
 13a:	0e 94 44 00 	call	0x88	; 0x88 <lcd_init>
	lcdWriteChar('H');
 13e:	88 e4       	ldi	r24, 0x48	; 72
 140:	0e 94 8b 00 	call	0x116	; 0x116 <lcdWriteChar>
	lcdWriteChar('o');
 144:	8f e6       	ldi	r24, 0x6F	; 111
 146:	0e 94 8b 00 	call	0x116	; 0x116 <lcdWriteChar>
	lcdWriteChar('l');
 14a:	8c e6       	ldi	r24, 0x6C	; 108
 14c:	0e 94 8b 00 	call	0x116	; 0x116 <lcdWriteChar>
	lcdWriteChar('a');
 150:	81 e6       	ldi	r24, 0x61	; 97
 152:	0e 94 8b 00 	call	0x116	; 0x116 <lcdWriteChar>
	LCD_CTRL_PORT = 0<<RS | 1<<E;
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	88 b9       	out	0x08, r24	; 8
	LCD_DATA_PORT = 0xc0;
 15a:	80 ec       	ldi	r24, 0xC0	; 192
 15c:	85 b9       	out	0x05, r24	; 5
	LCD_CTRL_PORT &= ~(1<<E);
 15e:	42 98       	cbi	0x08, 2	; 8
 160:	89 ef       	ldi	r24, 0xF9	; 249
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x36>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x3c>
 16a:	00 00       	nop
	_delay_ms(1);
	lcdWriteChar('M');
 16c:	8d e4       	ldi	r24, 0x4D	; 77
 16e:	0e 94 8b 00 	call	0x116	; 0x116 <lcdWriteChar>
	lcdWriteChar('u');
 172:	85 e7       	ldi	r24, 0x75	; 117
 174:	0e 94 8b 00 	call	0x116	; 0x116 <lcdWriteChar>
	lcdWriteChar('n');
 178:	8e e6       	ldi	r24, 0x6E	; 110
 17a:	0e 94 8b 00 	call	0x116	; 0x116 <lcdWriteChar>
	lcdWriteChar('d');
 17e:	84 e6       	ldi	r24, 0x64	; 100
 180:	0e 94 8b 00 	call	0x116	; 0x116 <lcdWriteChar>
	lcdWriteChar('o');
 184:	8f e6       	ldi	r24, 0x6F	; 111
 186:	0e 94 8b 00 	call	0x116	; 0x116 <lcdWriteChar>
 18a:	ff cf       	rjmp	.-2      	; 0x18a <main+0x5c>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
