
Display_7_Seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000000fc  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074c  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a8  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a2  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  000012c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000db  00000000  00000000  00001682  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000175d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define four 0XFF
unsigned char numero[]={CERO,UNO,TWO,Three,four};

int main(void)
{
    DIRECCION_PB |= TODOS_BITS_SALIDAS;
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(1<<DDC0);
  9c:	38 98       	cbi	0x07, 0	; 7
	while (!LEER_PIN_PC(PINC0));//Boton de start
  9e:	30 9b       	sbis	0x06, 0	; 6
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x8>
  a2:	31 e0       	ldi	r19, 0x01	; 1
			for (int i = 0; i<=4; i++)
			{
				ESCRIBIR_DISPLAY(numero[i]);
				if (LEER_PIN_PC(PINC2))
				{
					state = 0;
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	51 e0       	ldi	r21, 0x01	; 1
  a8:	40 e0       	ldi	r20, 0x00	; 0
	DDRC &= ~(1<<DDC0);
	while (!LEER_PIN_PC(PINC0));//Boton de start
	uint8_t state = 1;
    while (1) 
    {
		if(LEER_PIN_PC(PINC0)){
  aa:	30 99       	sbic	0x06, 0	; 6
  ac:	18 c0       	rjmp	.+48     	; 0xde <main+0x48>
  ae:	15 c0       	rjmp	.+42     	; 0xda <main+0x44>
			for (int i = 0; i<=4; i++)
			{
				ESCRIBIR_DISPLAY(numero[i]);
				if (LEER_PIN_PC(PINC2))
				{
					state = 0;
  b0:	34 2f       	mov	r19, r20
  b2:	01 96       	adiw	r24, 0x01	; 1
		}
		
		while(state == 1){
			for (int i = 0; i<=4; i++)
			{
				ESCRIBIR_DISPLAY(numero[i]);
  b4:	21 91       	ld	r18, Z+
  b6:	25 b9       	out	0x05, r18	; 5
				if (LEER_PIN_PC(PINC2))
  b8:	32 99       	sbic	0x06, 2	; 6
  ba:	19 c0       	rjmp	.+50     	; 0xee <main+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f e9       	ldi	r18, 0x9F	; 159
  be:	76 e8       	ldi	r23, 0x86	; 134
  c0:	a1 e0       	ldi	r26, 0x01	; 1
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	70 40       	sbci	r23, 0x00	; 0
  c6:	a0 40       	sbci	r26, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x2c>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x36>
  cc:	00 00       	nop
		if(LEER_PIN_PC(PINC0)){
			state = 1;
		}
		
		while(state == 1){
			for (int i = 0; i<=4; i++)
  ce:	85 30       	cpi	r24, 0x05	; 5
  d0:	91 05       	cpc	r25, r1
  d2:	7c f3       	brlt	.-34     	; 0xb2 <main+0x1c>
    {
		if(LEER_PIN_PC(PINC0)){
			state = 1;
		}
		
		while(state == 1){
  d4:	31 30       	cpi	r19, 0x01	; 1
  d6:	19 f0       	breq	.+6      	; 0xde <main+0x48>
  d8:	08 c0       	rjmp	.+16     	; 0xea <main+0x54>
  da:	31 30       	cpi	r19, 0x01	; 1
  dc:	31 f4       	brne	.+12     	; 0xea <main+0x54>
  de:	e0 e0       	ldi	r30, 0x00	; 0
  e0:	f1 e0       	ldi	r31, 0x01	; 1
			for (int i = 0; i<=4; i++)
			{
				ESCRIBIR_DISPLAY(numero[i]);
				if (LEER_PIN_PC(PINC2))
				{
					state = 0;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	35 2f       	mov	r19, r21
  e8:	e5 cf       	rjmp	.-54     	; 0xb4 <main+0x1e>
				}
				_delay_ms(500);
			}
			
		}
		ESCRIBIR_DISPLAY(0);
  ea:	65 b9       	out	0x05, r22	; 5
    }
  ec:	de cf       	rjmp	.-68     	; 0xaa <main+0x14>
		if(LEER_PIN_PC(PINC0)){
			state = 1;
		}
		
		while(state == 1){
			for (int i = 0; i<=4; i++)
  ee:	85 30       	cpi	r24, 0x05	; 5
  f0:	91 05       	cpc	r25, r1
  f2:	f4 f2       	brlt	.-68     	; 0xb0 <main+0x1a>
			{
				ESCRIBIR_DISPLAY(numero[i]);
				if (LEER_PIN_PC(PINC2))
				{
					state = 0;
  f4:	36 2f       	mov	r19, r22
  f6:	f9 cf       	rjmp	.-14     	; 0xea <main+0x54>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
